NA_indice <- length(ret) - length(residuals)
return(
residuals_distribution( ret[ k + NA_indice ],
c( sigma = sigma[k+NA_indice], e_0 = e_0[k+NA_indice], e_1 = e_1[k+NA_indice]
,k_0 = as.numeric(k_0)
, k_1 = as.numeric(k_1))
, ret, c( threshold_0 = as.numeric(numbers[1]), threshold_1 = as.numeric(numbers[1])))
)
} ) ) )
}
}else if ( distribution == 'PoT'){
for (i in 1:length(variable_list)){
numbers <- str_extract_all(variable_list[[i]][[2]], "\\d+\\.?\\d*")[[1]]# 这个表达式的主要目的是从字符串 str 中提取所有的数字，包括整数和浮点数。
assign( paste0( 'best_fit_garch_', i), Pot_fit_garch(data = variable_list[[i]][[1]], y = "return", x = paste0("rv", as.numeric(numbers[2])),
low.freq = low.freq, K = K,threshold_value = as.numeric(numbers[1])
, pot_k = TRUE, two_side = FALSE, gamma = TRUE ))
ret <- get( paste0( 'best_fit_garch_', i) )$df.fitted$return
# 计算边际的Pot_y
assign(
paste0( 'marginal_Pot_y_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = as.numeric(numbers[1]) )[["Pot_y"]]  )
assign(
paste0( 'marginal_Pot_y_label_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = c( threshold = as.numeric(numbers[1]) ) )[["label"]]
)
# 计算边际Pot_y的累积分布变量
sigma <- get( paste0( 'best_fit_garch_', i) )$df.fitted$tau * get( paste0( 'best_fit_garch_', i) )$df.fitted$g
e <- get( paste0( 'best_fit_garch_', i) )$e
# parameters <- list( k = 1, e = e, sigma = sigma)
if( 'k' %in% names(get( paste0( 'best_fit_garch_', i) )$par)){
k <- get( paste0( 'best_fit_garch_', i) )$par['k']
parameters <- list( k = k, e = e, sigma = sigma)
}else{
k <- 1
parameters <- list( k = k, e = e, sigma = sigma)
}
assign(
paste0( 'marginal_Pot_y_cdf_', i), Pot_y_cdf( ret,parameters, threshold = c( threshold = as.numeric(numbers[1]) ) )
)
}
}else if ( distribution == 'norm'){
for (i in 1:length(variable_list)){
numbers <- str_extract_all(variable_list[[i]][[2]], "\\d+\\.?\\d*")[[1]]# 这个表达式的主要目的是从字符串 str 中提取所有的数字，包括整数和浮点数。
assign( paste0( 'best_fit_garch_', i), fit_mfgarch(data = variable_list[[i]][[1]], y = "return", x = paste0("rv", as.numeric(numbers[2])), low.freq = low.freq, K = K, distribution='norm') )
assign( paste0( 'marginal_y_cdf_', i), na.omit(pnorm(get( paste0( 'best_fit_garch_', i) )$df.fitted$residuals ) ) )
}
}else if ( distribution == 't'){
for (i in 1:length(variable_list)){
numbers <- str_extract_all(variable_list[[i]][[2]], "\\d+\\.?\\d*")[[1]]# 这个表达式的主要目的是从字符串 str 中提取所有的数字，包括整数和浮点数。
assign( paste0( 'best_fit_garch_', i), fit_mfgarch(data = variable_list[[i]][[1]], y = "return", x = paste0("rv", as.numeric(numbers[2])), low.freq = low.freq, K = K, distribution='t') )
assign( paste0( 'marginal_y_cdf_', i), na.omit(pt( get( paste0( 'best_fit_garch_', i) )$df.fitted$residuals, df = get( paste0( 'best_fit_garch_', i) )$par[['V']] ) ) )
}
}
best_fit_garch_1[["broom.mgarch"]][["p.value"]]
best_fit_garch_2[["broom.mgarch"]][["p.value"]]
calculate_error( variable_list[[1]][[1]], vector = best_fit_garch_1$g*best_fit_garch_1$tau)
calculate_error( variable_list[[2]][[1]], vector = best_fit_garch_2$g*best_fit_garch_2$tau)
plot(marginal_residuals_1)
plot(marginal_residuals_2)
plot(marginal_residuals_cdf_1)
plot(marginal_residuals_cdf_2)
plot(marginal_Pot_y_1, ylab = '', xlab = "time", main = "yt1 series")
plot(marginal_Pot_y_2, ylab = '', xlab = "time", main = "yt2 series")
plot(marginal_Pot_y_cdf_1, ylab = '', xlab = "time", main = "F(yt1) series")
plot(marginal_Pot_y_cdf_2, ylab = '', xlab = "time", main = "F(yt2) series")
# 绘制边际变量的散点图
plot(marginal_Pot_y_cdf_1,marginal_Pot_y_cdf_2, ylab = '', xlab = " ", main = "F(yt1) and F(yt2) cdf scatter plot")
sum((marginal_Pot_y_cdf_1>0.5)&(marginal_Pot_y_cdf_2<0.5) )
sum((marginal_Pot_y_cdf_1<0.5)&(marginal_Pot_y_cdf_2>0.5) )
sum((marginal_Pot_y_cdf_1>0.5)&(marginal_Pot_y_cdf_2>0.5) )
sum((marginal_Pot_y_cdf_1<0.5)&(marginal_Pot_y_cdf_2<0.5) )
# 获取经验分布函数对象
ecdf_data1 <- ecdf(variable_list[[1]][[1]]$return)
ecdf_data2 <- ecdf(variable_list[[2]][[1]]$return)
# 获取历史数据的全部概率
probabilities1 <- ecdf_data1(variable_list[[1]][[1]]$return)
probabilities2 <- ecdf_data2(variable_list[[2]][[1]]$return)
# 绘制累计经验概率的散点图
plot(probabilities1,probabilities2)
marginal_Pot_y_label <- paste0( marginal_Pot_y_label_1, marginal_Pot_y_label_2)
marginal_residuals_label <- rep( '11', length(marginal_residuals_1))
aa=fit_tvc(list( marginal_Pot_y_cdf_1, marginal_Pot_y_cdf_2), marginal_Pot_y_label)
aaa = BiCopSelect( marginal_Pot_y_cdf_1, marginal_Pot_y_cdf_2)
aaa = BiCopSelect( familyset=c(0,1,3,4,5,6,7,8,9,10),marginal_Pot_y_cdf_1, marginal_Pot_y_cdf_2)
aa$par
aa$broom.mgarch$p.value
aa$broom.mgarch$rob.std.err
aa$llh
plot(aa$at, type = "l", ylab = '', xlab = "time", main = paste(distribution,"time-varying parameters at"))
bb <- BiCop(family = c(4), par = mean(aa$at), par2 = 0, tau = NULL, check.pars = TRUE)
plot(bb,main = "二维Gumbel分布")
# norm、t分布的联合分布拟合
best_fit_garch_1[["broom.mgarch"]][["p.value"]]
best_fit_garch_2[["broom.mgarch"]][["p.value"]]
plot(marginal_y_cdf_1, ylab = '', xlab = "time", main = "F(yt1) series")
plot(marginal_y_cdf_2, ylab = '', xlab = "time", main = "F(yt2) series")
# 绘制边际变量的散点图
plot(marginal_y_cdf_1,marginal_y_cdf_2, ylab = '', xlab = " ", main = "F(yt1) and F(yt2) cdf scatter plot")
aaa = BiCopSelect(marginal_y_cdf_1,marginal_y_cdf_2,se = TRUE)
aaa = BiCopSelect(marginal_y_cdf_1,marginal_y_cdf_2)
aaa
plot(aaa,main = "t Copula")
plot(aaa,main = "Gaussian Copula")
contourplot2( tCopula(param = aaa$par, dim =2,df = aaa$par2 ),dCopula, main = "t Copula" )
contourplot2( normalCopula(param = aaa$par, dim =2),dCopula, main = "Gaussian Copula" )
#
GASSpec = MultiGASSpec(Dist = "mvt", ScalingType = "Identity",
GASPar = list(scale = TRUE, correlation = TRUE))
Fit = MultiGASFit(GASSpec, data.frame(marginal_y_cdf_1,marginal_y_cdf_1))
Fit
}
Fit
# 绘制边际变量的散点图
plot(marginal_y_cdf_1,marginal_y_cdf_2, ylab = '', xlab = " ", main = "F(yt1) and F(yt2) cdf scatter plot")
plot(marginal_residuals_1)
plot(marginal_residuals_2)
plot(marginal_residuals_cdf_1)
plot(marginal_residuals_cdf_2)
plot(marginal_Pot_y_1, ylab = '', xlab = "time", main = "yt1 series")
plot(marginal_Pot_y_2, ylab = '', xlab = "time", main = "yt2 series")
plot(marginal_Pot_y_cdf_1, ylab = '', xlab = "time", main = "F(yt1) series")
plot(marginal_Pot_y_cdf_2, ylab = '', xlab = "time", main = "F(yt2) series")
# 绘制边际变量的散点图
plot(marginal_Pot_y_cdf_1,marginal_Pot_y_cdf_2, ylab = '', xlab = " ", main = "F(yt1) and F(yt2) cdf scatter plot")
# 获取经验分布函数对象
ecdf_data1 <- ecdf(variable_list[[1]][[1]]$return)
ecdf_data2 <- ecdf(variable_list[[2]][[1]]$return)
# 获取历史数据的全部概率
probabilities1 <- ecdf_data1(variable_list[[1]][[1]]$return)
probabilities2 <- ecdf_data2(variable_list[[2]][[1]]$return)
# 绘制累计经验概率的散点图
plot(probabilities1,probabilities2)
marginal_Pot_y_label <- paste0( marginal_Pot_y_label_1, marginal_Pot_y_label_2)
marginal_residuals_label <- rep( '11', length(marginal_residuals_1))
aa=fit_tvc(list( marginal_Pot_y_cdf_1, marginal_Pot_y_cdf_2), marginal_Pot_y_label)
plot(aa$at, type = "l", ylab = '', xlab = "time", main = paste(distribution,"time-varying parameters at"))
plot(marginal_residuals_1)
dev.copy(png, ".\\picture\\marginal_residuals_1.png")
dev.off()
plot(marginal_residuals_2)
dev.copy(png, ".\\picture\\marginal_residuals_2.png")
dev.off()
plot(marginal_residuals_1)
dev.copy(png, ".\\picture\\marginal_residuals_1.png")
dev.off()
plot(marginal_residuals_2)
dev.copy(png, ".\\picture\\marginal_residuals_2.png")
dev.off()
plot(marginal_residuals_cdf_1)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_1.png")
dev.off()
plot(marginal_residuals_cdf_2)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_2.png")
plot(marginal_residuals_1)
dev.copy(png, ".\\picture\\marginal_residuals_1.png")
dev.off()
plot(marginal_residuals_2)
dev.copy(png, ".\\picture\\marginal_residuals_2.png")
dev.off()
plot(marginal_residuals_cdf_1)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_1.png")
dev.off()
plot(marginal_residuals_cdf_2)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_2.png")
dev.off()
plot(marginal_Pot_y_1, ylab = '', xlab = "time", main = "yt1 series")
dev.copy(png, ".\\picture\\yt1 series.png")
dev.off()
plot(marginal_Pot_y_2, ylab = '', xlab = "time", main = "yt2 series")
dev.copy(png, ".\\picture\\yt2 series.png")
dev.off()
plot(marginal_Pot_y_cdf_1, ylab = '', xlab = "time", main = "F(yt1) series")
dev.copy(png, ".\\picture\\(yt1) series.png")
dev.off()
plot(marginal_Pot_y_cdf_2, ylab = '', xlab = "time", main = "F(yt2) series")
dev.off()
dev.off()
{
plot(marginal_residuals_1)
dev.copy(png, ".\\picture\\marginal_residuals_1.png")
dev.off()
plot(marginal_residuals_2)
dev.copy(png, ".\\picture\\marginal_residuals_2.png")
dev.off()
plot(marginal_residuals_cdf_1)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_1.png")
dev.off()
plot(marginal_residuals_cdf_2)
dev.copy(png, ".\\picture\\marginal_residuals_cdf_2.png")
dev.off()
plot(marginal_Pot_y_1, ylab = '', xlab = "time", main = "yt1 series")
dev.copy(png, ".\\picture\\yt1 series.png")
dev.off()
plot(marginal_Pot_y_2, ylab = '', xlab = "time", main = "yt2 series")
dev.copy(png, ".\\picture\\yt2 series.png")
dev.off()
plot(marginal_Pot_y_cdf_1, ylab = '', xlab = "time", main = "F(yt1) series")
dev.copy(png, ".\\picture\\(yt1) series.png")
dev.off()
plot(marginal_Pot_y_cdf_2, ylab = '', xlab = "time", main = "F(yt2) series")
dev.copy(png, ".\\picture\\F(yt2) series.png")
dev.off()
# 绘制边际变量的散点图
plot(marginal_Pot_y_cdf_1,marginal_Pot_y_cdf_2, ylab = '', xlab = " ", main = "F(yt1) and F(yt2) cdf scatter plot")
dev.copy(png, ".\\picture\\F(yt1) and F(yt2) cdf scatter plot.png")
dev.off()
}
marginal_Pot_y_label <- paste0( marginal_Pot_y_label_1, marginal_Pot_y_label_2)
marginal_residuals_label <- rep( '11', length(marginal_residuals_1))
aa=fit_tvc(list( marginal_Pot_y_cdf_1, marginal_Pot_y_cdf_2), marginal_Pot_y_label)
aa$par
aa$broom.mgarch$p.value
aa$broom.mgarch$rob.std.err
aa$llh
plot(aa$at, type = "l", ylab = '', xlab = "time", main = paste(distribution,"time-varying parameters at"))
dev.copy(png, ".\\picture\\time-varying parameters at.png")
dev.off()
path
# Scroll calculation var
# Initialize roll parameters
df=variable_list[[1]][[1]]
T=nrow(df)
window_length=floor(T*0.90)
# Initialize VaR, calculate upper tail VaR and lower tail VaR separately
VaR_level <- c( 0.9, 0.95, 0.975, 0.99, 0.995)
VaR_set <- as.vector( matrix(NA,length(VaR_level) ) )
VaR_set <- list( total_VaR_set_up = VaR_set, total_VaR_set_down = VaR_set,
X1_VaR_set_up = VaR_set, X1_VaR_set_down = VaR_set, X1_CoVaR_set_up = VaR_set, X1_CoVaR_set_down = VaR_set, X1_g_CoVaR_set_up = VaR_set, X1_g_CoVaR_set_down = VaR_set,
X2_VaR_set_up = VaR_set, X2_VaR_set_down = VaR_set, X2_CoVaR_set_up = VaR_set, X2_CoVaR_set_down = VaR_set, X2_g_CoVaR_set_up = VaR_set, X2_g_CoVaR_set_down = VaR_set)
{
# i=window_length
library(parallel)
library(progress)
clus <- makeCluster(detectCores() - 10 )
clusterEvalQ(clus, {
library(stringr)
library(Rcpp)
library(copula)
library(VC2copula)
library(VineCopula)
}
)
paste0(path,'/2T-PoT-MIDAS/helper_function.R')
paste0(path,'/2T-PoT-MIDAS/Pot_fit_garch.R')
paste0(path,'/2T-PoT-MIDAS/generic_functions.R')
paste0(path,'/2T-PoT-MIDAS/asymptotic normality_helper_function.R')
paste0(path,'/2T-PoT-GAS-Copula/copula_helper_funciton.R')
clusterEvalQ(clus, source("c:/Users/yuyu/Desktop/garch-midas/helper_function.R"))
clusterEvalQ(clus, source("c:/Users/yuyu/Desktop/garch-midas/Pot_fit_garch(自己编写).R"))
clusterEvalQ(clus, source("c:/Users/yuyu/Desktop/garch-midas/generic_functions.R"))
clusterEvalQ(clus, source("c:/Users/yuyu/Desktop/copula-var/copula_helper_funciton.R"))
clusterEvalQ(clus, source("c:/Users/yuyu/Desktop/garch-midas/渐进性质_helper_function.R"))
clusterExport(clus, varlist = "variable_list")
clusterExport(clus, varlist = "window_length")
clusterExport(clus, varlist = "distribution")
clusterExport(clus, varlist = "method")
clusterExport(clus, varlist = "low.freq")
clusterExport(clus, varlist = "K")
clusterExport(clus, varlist = "VaR_level")
clusterExport(clus, varlist = "VaR_set")
# result <- parLapply(clus, ( window_length + 1 ):T ,fun = rolling_prediction )
result <- parLapply(clus, ( window_length ):(T-1) ,fun = rolling_prediction )
#
stopCluster(clus)
save(result, file = paste0( "C://Users//yuyu//Desktop//copula-var//图（不加小波）//滚动预测var(1)//",ifelse(method=='2','传统','改进'),"方法","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(长度为",toString(window_length),")(改).RData") )
}
paste0(path,'/2T-PoT-MIDAS/helper_function.R')
{
# i=window_length
library(parallel)
library(progress)
clus <- makeCluster(detectCores() - 10 )
clusterEvalQ(clus, {
library(stringr)
library(Rcpp)
library(copula)
library(VC2copula)
library(VineCopula)
}
)
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-MIDAS/helper_function.R')))
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-MIDAS/Pot_fit_garch.R')))
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-MIDAS/generic_functions.R')))
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-MIDAS/asymptotic normality_helper_function.R')))
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-GAS-Copula/copula_helper_funciton.R')))
clusterExport(clus, varlist = "variable_list")
clusterExport(clus, varlist = "window_length")
clusterExport(clus, varlist = "distribution")
clusterExport(clus, varlist = "method")
clusterExport(clus, varlist = "low.freq")
clusterExport(clus, varlist = "K")
clusterExport(clus, varlist = "VaR_level")
clusterExport(clus, varlist = "VaR_set")
# result <- parLapply(clus, ( window_length + 1 ):T ,fun = rolling_prediction )
result <- parLapply(clus, ( window_length ):(T-1) ,fun = rolling_prediction )
#
stopCluster(clus)
save(result, file = paste0( "C://Users//yuyu//Desktop//copula-var//图（不加小波）//滚动预测var(1)//",ifelse(method=='2','传统','改进'),"方法","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(长度为",toString(window_length),")(改).RData") )
}
path
clusterEvalQ(clus, source(paste0(path,'/2T-PoT-MIDAS/helper_function.R')))
paste0(path,'/2T-PoT-MIDAS/helper_function.R')
source(paste0(path,'/2T-PoT-MIDAS/helper_function.R'))
path
current_dir
{
# i=window_length
library(parallel)
library(progress)
clus <- makeCluster(detectCores() - 10 )
clusterEvalQ(clus, {
library(stringr)
library(Rcpp)
library(copula)
library(VC2copula)
library(VineCopula)
}
)
clusterEvalQ(clus, source(paste0(path,'/helper_function.R')))
clusterEvalQ(clus, source(paste0(path,'/Pot_fit_garch.R')))
clusterEvalQ(clus, source(paste0(path,'/generic_functions.R')))
clusterEvalQ(clus, source(paste0(path,'/asymptotic normality_helper_function.R')))
clusterEvalQ(clus, source(paste0(current_dir,'/copula_helper_funciton.R')))
clusterExport(clus, varlist = "variable_list")
clusterExport(clus, varlist = "window_length")
clusterExport(clus, varlist = "distribution")
clusterExport(clus, varlist = "method")
clusterExport(clus, varlist = "low.freq")
clusterExport(clus, varlist = "K")
clusterExport(clus, varlist = "VaR_level")
clusterExport(clus, varlist = "VaR_set")
# result <- parLapply(clus, ( window_length + 1 ):T ,fun = rolling_prediction )
result <- parLapply(clus, ( window_length ):(T-1) ,fun = rolling_prediction )
#
stopCluster(clus)
save(result, file = paste0( "C://Users//yuyu//Desktop//copula-var//图（不加小波）//滚动预测var(1)//",ifelse(method=='2','传统','改进'),"方法","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(长度为",toString(window_length),")(改).RData") )
}
path
paste0(path,'/helper_function.R')
source(paste0(path,'/helper_function.R'))
clusterEvalQ(clus, source(paste0(path,'/helper_function.R')))
path
clusterEvalQ(clus, source(paste0(path,'/helper_function.R')))
clusterExport(clus, varlist = "path")
clusterExport(clus, varlist = "current_dir")
clusterEvalQ(clus, source(paste0(path,'/helper_function.R')))
{
# i=window_length
library(parallel)
library(progress)
clus <- makeCluster(detectCores() - 10 )
clusterEvalQ(clus, {
library(stringr)
library(Rcpp)
library(copula)
library(VC2copula)
library(VineCopula)
}
)
clusterExport(clus, varlist = "variable_list")
clusterExport(clus, varlist = "window_length")
clusterExport(clus, varlist = "distribution")
clusterExport(clus, varlist = "method")
clusterExport(clus, varlist = "low.freq")
clusterExport(clus, varlist = "K")
clusterExport(clus, varlist = "VaR_level")
clusterExport(clus, varlist = "VaR_set")
clusterExport(clus, varlist = "path")
clusterExport(clus, varlist = "current_dir")
clusterEvalQ(clus, source(paste0(path,'/helper_function.R')))
clusterEvalQ(clus, source(paste0(path,'/Pot_fit_garch.R')))
clusterEvalQ(clus, source(paste0(path,'/generic_functions.R')))
clusterEvalQ(clus, source(paste0(path,'/asymptotic normality_helper_function.R')))
clusterEvalQ(clus, source(paste0(current_dir,'/copula_helper_funciton.R')))
# result <- parLapply(clus, ( window_length + 1 ):T ,fun = rolling_prediction )
result <- parLapply(clus, ( window_length ):(T-1) ,fun = rolling_prediction )
#
stopCluster(clus)
save(result, file = paste0( "C://Users//yuyu//Desktop//copula-var//图（不加小波）//滚动预测var(1)//",ifelse(method=='2','传统','改进'),"方法","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(长度为",toString(window_length),")(改).RData") )
}
result
result=a
result=1
save(result, file = paste0( "current_dir//Rolling forecast var//",ifelse(method=='2','tradition','revised'),"_method","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(length",toString(window_length),").RData") )
save(result, file = paste0( "current_dir//Rolling_forecast_var//",ifelse(method=='2','tradition','revised'),"_method","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(length",toString(window_length),").RData") )
save(result, file = paste0(current_dir, "//Rolling_forecast_var//",ifelse(method=='2','tradition','revised'),"_method","_",distribution,'_'
,ifelse(distribution=='PoT',data_tail,''),"(length",toString(window_length),").RData") )
data_tail
data_tail = 'two_side'
rm(list=ls())
# Get file location
current_dir <- getwd()
parent_folder <- dirname(current_dir)
path <- paste0(parent_folder,'/2T-PoT-MIDAS')
setwd(path)
library(numDeriv)
library(Rcpp)
library(stringr)
library(foreach)
library(dplyr)
library(lubridate)
library(highfrequency)
library(xts)
library(copula)
library(VC2copula)
library(VineCopula)
# Import marginally relevant function files
source('helper_function.R')
source('fit_fmgarch.R')
source('generic_functions.R')
source('Pot_fit_garch.R')
source('asymptotic normality_helper_function.R')
setwd(current_dir)
source('copula_helper_funciton.R')
# Creating a variable storage list
variable_list=list()
load('energy_car.RData')
energy_car$model <- "Pot_fit_model0.85_0"
variable_list[['energy_car']] <- energy_car
load("energy.RData")
energy$model <- "Pot_fit_model0.85_0"
variable_list[['energy']] <- energy
# Initialize model parameters
K=24
low.freq='month'
method = 1 # Improved methodology
distribution ='2PoT'
distribution ='PoT'
data_tail = 'up'
if( (distribution == 'PoT')&&( data_tail == 'down' ) ){
variable_list[["energy_car"]][["data"]][["return"]] <- -(energy_car$data$return)
variable_list[["energy"]][["data"]][["return"]] <- -(energy$data$return)
}else if( (distribution == 'PoT')&&( data_tail == 'up' ) ){
variable_list[["energy_car"]][["data"]][["return"]] <- (energy_car$data$return)
variable_list[["energy"]][["data"]][["return"]] <- (energy$data$return)
}else if( (distribution == '2PoT') ){
variable_list[["energy_car"]][["data"]][["return"]] <- (energy_car$data$return)
variable_list[["energy"]][["data"]][["return"]] <- (energy$data$return)
}
# Data preprocessing
date = c( variable_list[[1]][[1]]$date[1], variable_list[[1]][[1]]$date[length(variable_list[[1]][[1]]$date)] )
# Make sure both are the same length
for (i in 2:length(variable_list) ) {
list <- variable_list[[i]][[1]]
variable_list[[i]][[1]] <- list[ which( list == date[1] ): which(list == date[2]), ]
}
for (i in 1:length(variable_list)){
numbers <- str_extract_all(variable_list[[i]][[2]], "\\d+\\.?\\d*")[[1]]# 这个表达式的主要目的是从字符串 str 中提取所有的数字，包括整数和浮点数。
assign( paste0( 'best_fit_garch_', i), Pot_fit_garch(data = variable_list[[i]][[1]], y = "return", x = paste0("rv", as.numeric(numbers[2])),
low.freq = low.freq, K = K,threshold_value = as.numeric(numbers[1])
, pot_k = TRUE, two_side = FALSE, gamma = TRUE ))
ret <- get( paste0( 'best_fit_garch_', i) )$df.fitted$return
# Calculate the marginal Pot_y
assign(
paste0( 'marginal_Pot_y_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = as.numeric(numbers[1]) )[["Pot_y"]]  )
assign(
paste0( 'marginal_Pot_y_label_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = c( threshold = as.numeric(numbers[1]) ) )[["label"]]
)
# Compute the cumulative distribution variable for the marginal Pot_y
sigma <- get( paste0( 'best_fit_garch_', i) )$df.fitted$tau * get( paste0( 'best_fit_garch_', i) )$df.fitted$g
e <- get( paste0( 'best_fit_garch_', i) )$e
# parameters <- list( k = 1, e = e, sigma = sigma)
if( 'k' %in% names(get( paste0( 'best_fit_garch_', i) )$par)){
k <- get( paste0( 'best_fit_garch_', i) )$par['k']
parameters <- list( k = k, e = e, sigma = sigma)
}else{
k <- 1
parameters <- list( k = k, e = e, sigma = sigma)
}
assign(
paste0( 'marginal_Pot_y_cdf_', i), Pot_y_cdf( ret,parameters, threshold = c( threshold = as.numeric(numbers[1]) ) )
)
}
debug(Pot_fit_garch)
for (i in 1:length(variable_list)){
numbers <- str_extract_all(variable_list[[i]][[2]], "\\d+\\.?\\d*")[[1]]# 这个表达式的主要目的是从字符串 str 中提取所有的数字，包括整数和浮点数。
assign( paste0( 'best_fit_garch_', i), Pot_fit_garch(data = variable_list[[i]][[1]], y = "return", x = paste0("rv", as.numeric(numbers[2])),
low.freq = low.freq, K = K,threshold_value = as.numeric(numbers[1])
, pot_k = TRUE, two_side = FALSE, gamma = TRUE ))
ret <- get( paste0( 'best_fit_garch_', i) )$df.fitted$return
# Calculate the marginal Pot_y
assign(
paste0( 'marginal_Pot_y_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = as.numeric(numbers[1]) )[["Pot_y"]]  )
assign(
paste0( 'marginal_Pot_y_label_', i), calculate_marginal_label( get( paste0( 'best_fit_garch_', i) ),
threshold = c( threshold = as.numeric(numbers[1]) ) )[["label"]]
)
# Compute the cumulative distribution variable for the marginal Pot_y
sigma <- get( paste0( 'best_fit_garch_', i) )$df.fitted$tau * get( paste0( 'best_fit_garch_', i) )$df.fitted$g
e <- get( paste0( 'best_fit_garch_', i) )$e
# parameters <- list( k = 1, e = e, sigma = sigma)
if( 'k' %in% names(get( paste0( 'best_fit_garch_', i) )$par)){
k <- get( paste0( 'best_fit_garch_', i) )$par['k']
parameters <- list( k = k, e = e, sigma = sigma)
}else{
k <- 1
parameters <- list( k = k, e = e, sigma = sigma)
}
assign(
paste0( 'marginal_Pot_y_cdf_', i), Pot_y_cdf( ret,parameters, threshold = c( threshold = as.numeric(numbers[1]) ) )
)
}
llh_mf_Pot
