energy_car_day[,'month']=last_day_of_month-days(1)
df=energy_car_day
low.freq='month'
# Normalized data
df$date <- gsub("/", "-", df$date)
df$date <- format(as.Date(df$date), "%Y-%m-%d")
#############################################################################################################
#############################################################################################################
#############################################################################################################
# wavelet transform
# Extracting the low-frequency signal from the modwt decomposition, the RV at different scales will be calculated from the signal
library(waveslim)
calculate_modwt<-function(df,y='return', filter, n){
return_modwt=modwt(t(df[y]), wf = filter, n.levels =  n, boundary = "periodic")
return_modwt
}
modwt_df=df
rv0 <- modwt_df %>%
group_by(modwt_df[[low.freq]]) %>%
mutate( sum_of_squares = sum(return^2))
return_modwt = calculate_modwt(modwt_df,y='return',filter="d8", n=7)
return_modwt = as.data.frame(return_modwt[1:length(return_modwt)])
return_modwt[[low.freq]]=modwt_df[[low.freq]]
# https://blog.csdn.net/weixin_47697584/article/details/121953827
# Principles of wavelet transform reconstruction
rv1 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d1^2))
rv2 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d2^2))
rv3 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d3^2))
rv4 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d4^2))
rv5 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d5^2))
rv6 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d6^2))
rv7 <- return_modwt %>%
group_by(return_modwt[[low.freq]]) %>%
mutate( sum_of_squares = sum(d7^2))
modwt_df$rv0<-rv0[['sum_of_squares']]
modwt_df$rv1<-rv1[['sum_of_squares']]
modwt_df$rv2<-rv2[['sum_of_squares']]
modwt_df$rv3<-rv3[['sum_of_squares']]
modwt_df$rv4<-rv4[['sum_of_squares']]
modwt_df$rv5<-rv5[['sum_of_squares']]
modwt_df$rv6<-rv6[['sum_of_squares']]
modwt_df$rv7<-rv7[['sum_of_squares']]
# Calculating true volatility
sum_modwt_df <- energy_car_5min %>%
group_by(energy_car_5min[['day']]) %>%
summarise(sum_of_squares = sum(return^2))
modwt_df$rv = unlist(sum_modwt_df["sum_of_squares"])[2:length(unlist(sum_modwt_df["sum_of_squares"]))]
plot(modwt_df$rv)
# We can also replace RV with other metrics, such as RBV, MedRV, RVKernel
library(data.table)
data <- data.table(DT = energy_car_5min$date,onemin = energy_car_5min$return)
# data <- list(data)
RBV <- rBPCov(rData = data[,list(DT,onemin)],makeReturns = FALSE,makePsd = TRUE)  #RBV
MedRV<-rMedRVar(rData = data[,list(DT,onemin)], makeReturns = FALSE,makePsd = TRUE)
RVKernel <- rKernelCov(rData = data[,list(DT,onemin)],makePsd = TRUE)
RBV <- RBV$BPV[2:nrow(RBV)]
MedRV <- MedRV$rMedRVar[2:nrow(MedRV)]
RVKernel <- RVKernel$RK[2:nrow(RVKernel)]
RBV[RBV<0] <- 0
MedRV[MedRV<0] <- 0
RVKernel[RVKernel<0] <- 0
modwt_df$RBV <- RBV
modwt_df$MedRV <- MedRV
modwt_df$RVKernel <- RVKernel
plot(RBV)
plot(MedRV)
plot(RVKernel)
# Save preprocessed data information
save(modwt_df,"modwt_df.RData")
# Save preprocessed data information
save(modwt_df, file = "modwt_df.RData")
return = modwt_df$return
plot(return)
threshold = threshold
# Cycle through the error terms multiple times
# Get file location
current_dir <- getwd()
current_dir
# Save preprocessed data information
save(modwt_df, file = "energy_car_modwt_df.RData")
# Cycle through the error terms multiple times
# Get file location
load("energy_car_modwt_df.RData")
energy_car_modwt_df
library(numDeriv)
library(Rcpp)
library(stringr)
library(foreach)
library(dplyr)
library(lubridate)
library(highfrequency)
library(xts)
library(copula)
source("./helper_function.R")
source("./generic_functions.R")
load("./modwt_df_energy_car.RData")
load("./energy_car_modwt_df.RData")
energy_car
modwt_df
# Bilateral PoT residual distribution
two_side_residuals_distribution <- function(x,parameters,data,threshold){
sigma <- parameters[["sigma"]]
e_0 <- parameters[["e_0"]]
e_1 <- parameters[["e_1"]]
k_0 <- parameters[["k_0"]]
k_1 <- parameters[["k_1"]]
sigma <-sqrt(sigma)
if ( ( "threshold_0" %in% names(threshold) ) && ( "threshold_1" %in% names(threshold) ) )
{
threshold_0 <- threshold[["threshold_0"]]
threshold_1 <- threshold[["threshold_1"]]
}else{
threshold_0 <- threshold
threshold_1 <- threshold
}
threshold_0 <- sort(data)[floor(length(data)*threshold_0)]
threshold_1 <- abs(sort(data)[floor(length(data)*(1-threshold_1))])# 由于threshold_1的值在代码中要被用于计算分布，因此采用绝对值方便书写，避免-+号的混乱
# Define the truncated empirical distribution function, i.e., the empirical distribution function at less than the threshold value
empirical_distribution <- function(x,data,threshold_0,threshold_1){
return( sum((data<x)&(data<threshold_0)&(data>(-threshold_1)) )/sum( (data<threshold_0)&(data>(-threshold_1)) ) )
}
if(x>=threshold_0)
{
return(
(1-k_0*(threshold_0/sigma)^(-e_0)-k_1*(threshold_1/sigma)^(-e_1))
*empirical_distribution(x,data,threshold_0,threshold_1)
+k_0*( (threshold_0/sigma)^(-e_0) )*( 1-(x/threshold_0)^(-e_0) )
+k_1*( (threshold_1/sigma)^(-e_1) )
)
}else if( (x<threshold_0)&((-threshold_1)<x) ){
return(
(1-k_0*(threshold_0/sigma)^(-e_0)-k_1*(threshold_1/sigma)^(-e_1) )
*empirical_distribution(x,data,threshold_0,threshold_1)
+k_1*( (threshold_1/sigma)^(-e_1) )
)
}else if(x<=(-threshold_1)){
return( k_1*( (threshold_1/sigma)^(-e_1) )*( 1-( 1-(-x/threshold_1)^(-e_1) ) ) )
}
}
two_side_reverse_residuals_distribution<- function(u,parameters,data,threshold){
ff <- function(theta) { (100*(two_side_residuals_distribution(theta,parameters,data,threshold)-u))^2 }
result <-  optim(1, function(x) ff(x))$par
return(result)
}
two_side_reverse_residuals_distribution(0.1,c( sigma =  1.2, e_0 = 10, e_1 = 10, k_0 = 0.1, k_1 = 0.1),
rnorm(100000), c( threshold_0 = 0.9,threshold_1 =  0.9))
random_u <- runif(500)
random_x <- rep(NA,length(random_u))
return <- rnorm(10000)
threshold <- c( threshold_0 = 0.95,threshold_1 =  0.95)
sort(return)[length(return)*threshold]
for (i in 1:length(random_u)) {
random_x[i] = two_side_reverse_residuals_distribution(random_u[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 0.1, k_1 = 0.1),
# random_x[i] = two_side_reverse_residuals_distribution(random_u[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 0.8, k_1 = 0.8),
# random_x[i] = two_side_reverse_residuals_distribution(random_u[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 1.2, k_1 = 1.2),
return, threshold = threshold )
}
plot(random_x,random_u)
data = data.frame( random_x = random_x[abs(random_x)<5],random_u = random_u[abs(random_x)<5])
ggplot(data,aes(x = random_x,y = random_u)) +
geom_line(aes(x = random_x,y = random_u)) +
labs(title = 'distribution', x = NULL,y = "Probability") +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
# Mapping of distribution
library(ggplot2)
plot(random_x,random_u)
data = data.frame( random_x = random_x[abs(random_x)<5],random_u = random_u[abs(random_x)<5])
ggplot(data,aes(x = random_x,y = random_u)) +
geom_line(aes(x = random_x,y = random_u)) +
labs(title = 'distribution', x = NULL,y = "Probability") +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
test_random_u=c(NA,length(random_u))
for (i in 1:length(random_u)) {
test_random_u[i] = two_side_residuals_distribution(random_x[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 0.1, k_1 = 0.1),
# test_random_u[i] = two_side_residuals_distribution(random_x[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 0.8, k_1 = 0.8),
# test_random_u[i] = two_side_residuals_distribution(random_x[i],c( sigma = 1.2, e_0 = 3, e_1 =  3,  k_0 = 1.2, k_1 = 1.2),
return, threshold = threshold)
}
# plot(random_x[abs(random_x)<5],test_random_u[abs(random_x)<5])
plot(random_x,test_random_u)
# Define functions to generate bilateral pot data
generate_two_side_pot_data <- function(n,parameters,data,threshold) {
random_numbers <- n
alpha <- parameters[["alpha"]]
beta <- parameters[["beta"]]
omega <- parameters[["omega"]]
if (( "k_0" %in% names(parameters) ) ){
k_0 <- parameters[["k_0"]]
k_1 <- parameters[["k_1"]]
}else{
k_0 = 1
k_1 = 1
}
Pot_p1_0 <- parameters[["Pot_p1_0"]]
Pot_p2_0 <- parameters[['Pot_p2_0']]
Pot_p3_0 <- parameters[['Pot_p3_0']]
Pot_p1_1 <- parameters[["Pot_p1_1"]]
Pot_p2_1 <- parameters[['Pot_p2_1']]
Pot_p3_1 <- parameters[['Pot_p3_1']]
threshold_0 <- threshold[["threshold_0"]]
threshold_1 <- threshold[["threshold_1"]]
data <- data
e_0 <- rep( mean(calculate_shape_value(b1 = Pot_p1_0, b2 = Pot_p2_0, b3 = Pot_p3_0, (data) )), random_numbers)
e_1 <- rep( mean(calculate_shape_value(b1 = Pot_p1_1, b2 = Pot_p2_1, b3 = Pot_p3_1, (data) )), random_numbers)
sigma <- rep( (var(data)), random_numbers)
residuals <- rep(NA,random_numbers)
random_u <- runif(1)
i = 1
probility = rep(0,random_numbers)
while(i < (random_numbers) ) {
residuals[i] = two_side_reverse_residuals_distribution( random_u,c( sigma = sigma[i], e_0 = e_0[i], e_1 = e_1[i], k_0 = k_0,
k_1 = k_1 ), data, c( threshold_0 = threshold_0,
threshold_1 = threshold_1 ) )
e_0[i+1] = exp( Pot_p1_0+Pot_p2_0*log(e_0[i])+Pot_p3_0*exp( -abs(residuals[i]) ) )
e_1[i+1] = exp( Pot_p1_1+Pot_p2_1*log(e_1[i])+Pot_p3_1*exp( -abs(residuals[i]) ) )
sigma[i+1] = omega+alpha*residuals[i]*residuals[i]+beta*sigma[i]
probility[i+1]= (( ( k_0*( (sort(data)[threshold_0*length(data)]) / (sqrt(sigma[i+1]) ) )^(-e_0[i+1]) ) + k_1*( ( (sort(-1*data)[threshold_1*length(data)]) / ( sqrt(sigma[i+1]) ) )^(-e_1[i+1]) )  ) )
while(  (  k_0*( ( (sort(data)[threshold_0*length(data)]) / (sqrt(sigma[i+1]) ) )^(-e_0[i+1]) )
+ k_1*( ( (sort(-1*data)[threshold_1*length(data)]) / ( sqrt(sigma[i+1]) ) )^(-e_1[i+1]) )  )>1){
print("Please reset the parameters to ensure that the probability sum of the upper and lower tails is less than 1")
print("False tail probability")
print(( ( k_0*( (sort(data)[threshold_0*length(data)]) / (sqrt(sigma[i+1]) ) )^(-e_0[i+1]) ) + k_1*( ( (sort(-1*data)[threshold_1*length(data)]) / ( sqrt(sigma[i+1]) ) )^(-e_1[i+1]) )  ) )
print("sigma")
print(i)
i<-max(i-20,0)
print("Restart the simulation until the tail probability is less than 1 all the way through")
}
random_u <- runif(1)
i <- i + 1
}
residuals[random_numbers] = two_side_reverse_residuals_distribution(random_u,c( sigma = sigma[random_numbers],
e_0 = e_0[random_numbers],e_1 = e_1[random_numbers],
k_0 = k_0, k_1 = k_1 ),
data, c( threshold_0 = threshold_0
, threshold_1 = threshold_1 ) )
return(list(return = residuals, sigma = sigma, e_0 = e_0, e_1 = e_1, probility = probility ))
}
llh_two_side_Pot <-
function( ret, Pot_y, k = c(k_0 = 1,k_1 = 1), omega, alpha, beta,
threshold_value, Pot_p1, Pot_p2, Pot_p3, g_zero) {
k_0<-k[1]
k_1<-k[2]
ret <- ret #-mu
yt = sign(Pot_y)
sigma1 <- calculate_g(omega = omega, alpha = alpha, beta = beta, gamma = 0, returns = ret, g0 = 1 )
sigma1 = sqrt(sigma1)
e_0<-calculate_shape_value(b1 = Pot_p1[1],b2 = Pot_p2[1],b3 = Pot_p3[1],(ret))#在极值理论文献中mu默认为0，但是混频考虑了mu,因此改成了(ret - mu)
e_1<-calculate_shape_value(b1 = Pot_p1[2],b2 = Pot_p2[2],b3 = Pot_p3[2],(ret))#在极值理论文献中mu默认为0，但是混频考虑了mu,因此改成了(ret - mu)
penalty0 <- ifelse( ( 1-k_0*(threshold_value[1]/sigma1)^(-e_0)-k_1*(threshold_value[2]/sigma1)^(-e_1) )>0
, log( 1-k_0*(threshold_value[1]/sigma1)^(-e_0)-k_1*(threshold_value[2]/sigma1)^(-e_1) ),-1e6 )
penalty1 <- ifelse( ( ( k_0*( (threshold_value[1]) /sigma1)^(-e_0) ) + k_1*( (threshold_value[2]) /sigma1)^(-e_1)  )<1
, ( log(k_0)+log(e_0)+e_0*log(sigma1)-(e_0+1)*log(threshold_value[1]+Pot_y) )
, -1e6 )
penalty2 <- ifelse( ( ( k_0*( (threshold_value[1]) /sigma1)^(-e_0) ) + k_1*( (threshold_value[2]) /sigma1)^(-e_1)  )<1
, ( log(k_1)+log(e_1)+e_1*log(sigma1)-(e_1+1)*log(threshold_value[2]+Pot_y) )
, -1e6 )
-(((yt-1)/-1)*penalty0
+yt*(ret>0)*(penalty1)
+yt*(ret<0)*(penalty2))#注意区分小k和大K
}
fit_two_side_pot_distribution <- function( ret, threshold , k_select = FALSE, sigma_select = TRUE, omega_select = TRUE ){
Pot_y=ret
Pot_y[ret>0] = ret[ret>0]-sort(ret)[floor(length(ret)*threshold[["threshold_0"]])]
Pot_y[ret<0] = Pot_y[ret<0]-sort(ret)[floor(length(ret)*(1-threshold[["threshold_1"]]))]
Pot_y[ret>0] = ifelse(Pot_y[ret>0]>0,Pot_y[ret>0],0)
Pot_y[ret<0] = ifelse(Pot_y[ret<0]<0,abs(Pot_y[ret<0]),0)
threshold_value=c( sort(ret)[floor(length(ret)*threshold[["threshold_0"]])],
( -sort(ret)[floor(length(ret)*(1-threshold[["threshold_1"]]))] ) )
if(k_select == FALSE){
if(sigma_select == TRUE){
if(omega_select == TRUE){
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
omega = p["omega"],alpha = p["alpha"], beta  = p["beta"],
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]))
}
par.start <- c(omega = 0.01, alpha = 0.01, beta = 0.8,
Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c(0,-1,-1, 0, 0, 0, 0, 0, 0),
c(0, 1, 0, 0, 0, 0, 0, 0, 0),
c(0, 0, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0,-1, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 0,-1, 0),
c(0, 0, 0, 0, 0, 0, 0, 1, 0))
ci.opt <- c(-0.99999, 0, 0, -1, 0, -1, 0 )
}
else{
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
omega = 1-p["alpha"]-p["beta"],
alpha = p["alpha"], beta  = p["beta"],
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]) )
}
par.start <- c(alpha = 0.01, beta = 0.8,
Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c(-1,-1, 0, 0, 0, 0, 0, 0),
c( 1, 0, 0, 0, 0, 0, 0, 0),
c( 0, 1, 0, 0, 0, 0, 0, 0),
c( 0, 0, 0,-1, 0, 0, 0, 0),
c( 0, 0, 0, 1, 0, 0, 0, 0),
c( 0, 0, 0, 0, 0, 0,-1, 0),
c( 0, 0, 0, 0, 0, 0, 1, 0))
ci.opt <- c(-0.99999, 0, 0, -1, 0, -1, 0 )
}
}else{
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
omega = 1, alpha = 0, beta  = 0,
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]))
}
par.start <- c(Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c( 0,-1, 0, 0, 0, 0),
c( 0, 1, 0, 0, 0, 0),
c( 0, 0, 0, 0,-1, 0),
c( 0, 0, 0, 0, 1, 0))
ci.opt <- c( -1, 0, -1, 0)
}
}else{
if(sigma_select == TRUE){
if(omega_select == TRUE){
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
k = c(p["k_0"],p["k_1"]),
omega = p["omega"],alpha = p["alpha"], beta  = p["beta"],
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]))
}
par.start <- c(k_0 = 1, k_1 = 1, omega = 0.01, alpha = 0.01, beta = 0.8,
Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c(0, 0, 0,-1,-1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0),
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0))
ci.opt <- c(-0.99999, 0, 0, -1, 0, -1, 0)
}
else{
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
k = c(p["k_0"],p["k_1"]),
omega = 1-p["alpha"]-p["beta"],
alpha = p["alpha"], beta  = p["beta"],
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]) )
}
par.start <- c(k_0 = 1, k_1 = 1, alpha = 0.01, beta = 0.8,
Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c(0, 0,-1,-1, 0, 0, 0, 0, 0, 0),
c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 0,-1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 0, 0,-1, 0),
c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0))
ci.opt <- c(-0.99999, 0, 0, -1, 0, -1, 0)
}
}else{
lf <- function(p) {
llh_two_side_Pot(ret = ret,Pot_y = Pot_y, threshold_value = threshold_value,
k = c(p["k_0"],p["k_1"]),
omega = 1, alpha = 0, beta  = 0,
Pot_p1 = c(p["Pot_p1_0"],p["Pot_p1_1"]),
Pot_p2 = c(p["Pot_p2_0"],p["Pot_p2_1"]),
Pot_p3 = c(p["Pot_p3_0"],p["Pot_p3_1"]))
}
par.start <- c(k_0 = 1, k_1 = 1, Pot_p1_0 = 0.1, Pot_p2_0 = 0.8, Pot_p3_0 = 0.1,
Pot_p1_1 = 0.1, Pot_p2_1 = 0.8, Pot_p3_1 = 0.1)
ui.opt <- rbind(c(0, 0, 0,-1, 0, 0, 0, 0),
c(0, 0, 0, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0,-1, 0),
c(0, 0, 0, 0, 0, 0, 1, 0))
ci.opt <- c( -1, 0, -1, 0 )
}
}
p.e.nlminb <- constrOptim(theta = par.start, f = function(theta) { sum(lf(theta)) },
grad = NULL, ui = ui.opt, ci = ci.opt, hessian = FALSE)
par <- p.e.nlminb$par
inv_hessian <- try({
solve(-suppressWarnings(hessian(x = par, func = function (theta) {
-sum(lf(theta))
}, method.args=list(eps=1e-4, d=0.001, zero.tol=sqrt(.Machine$double.eps/7e-7), r=4, v=2, show.details=FALSE))))
}, silent = TRUE)
if (class(inv_hessian)[1] == "try-error") {
warning("Inverting the Hessian matrix failed. No robust standard errors calculated. Possible workaround: Multiply returns by 100.")
rob.std.err <- NA
} else {
rob.std.err <- sqrt(diag(inv_hessian %*% crossprod(jacobian(func = lf, x = par)) %*% inv_hessian))
}
p.value = 2 * (1 - pnorm(unlist(abs(par/rob.std.err))))
sigma1 <- calculate_g(omega = p.e.nlminb$par[['omega']], alpha = p.e.nlminb$par[['beta']]
, beta = p.e.nlminb$par[['alpha']], gamma = 0, returns = ret, g0 = var(ret) )
list(par = p.e.nlminb$par, value = -p.e.nlminb$value, p.value = p.value, sigma = sigma1)
}
library(numDeriv)
library(Rcpp)
library(stringr)
library(foreach)
library(dplyr)
library(lubridate)
library(highfrequency)
library(xts)
library(copula)
source("./helper_function.R")
source("./generic_functions.R")
# Use energy_car as a reference to get the real parameters
load("./energy_car_modwt_df.RData")
threshold = c( threshold_0 = 0.9, threshold_1 = 0.9)
fit_par=fit_two_side_pot_distribution( ret = modwt_df$return, threshold = threshold, k_select = TRUE, sigma_select = TRUE, omega_select = TRUE)
plot(calculate_g(omega = fit_par$par[1], beta = fit_par$par[2], alpha = fit_par$par[3] ,gamma = 0, g0 = var(return),returns = return))
fit_par$par
fit_par$par
return = modwt_df$return
circulate_number=100
k=3
step=3000
sort(return)[length(return)*threshold]
real_parameters = fit_par$par
error_MAE = matrix( 0,nrow = k, ncol = length(real_parameters) )
error_MSE = matrix( 0,nrow = k, ncol = length(real_parameters) )
error_Stdev = matrix( 0,nrow = k, ncol = length(real_parameters) )
fit_parameters = vector("list", k)
# Simulation of multiple estimation of parameters
for (j in 1:k) {
fit_parameters[[j]] = matrix(NA, nrow = circulate_number, ncol = length(real_parameters) )
# Fitting the generated data
for (i in 1:circulate_number) {
print(i)
sim_data=generate_two_side_pot_data( step*j, real_parameters, return, threshold = threshold )$return
fit_par = fit_two_side_pot_distribution( ret = sim_data, threshold = threshold, k_select = TRUE, sigma_select = TRUE, omega_select = TRUE)
fit_parameters[[j]][i,] = fit_par$par
}
}
# calculation error
for (j in 1:k) {
for (i in 1:circulate_number) {
error_MAE[j,] = error_MAE[j,] + abs(as.vector( real_parameters ) - as.vector( fit_parameters[[j]][i,] ) )
error_MSE[j,] = error_MSE[j,] + ( as.vector( real_parameters ) - as.vector( fit_parameters[[j]][i,] ) )^2
error_Stdev[j,] = error_Stdev[j,] + ( as.vector( colMeans(fit_parameters[[j]]) - as.vector( fit_parameters[[j]][i,] ) ) )^2
}
}
error_MAE <- error_MAE/circulate_number
error_MSE <- error_MSE/circulate_number
error_Stdev <- sqrt(error_Stdev/circulate_number)
error = list( as.data.frame(error_MAE), as.data.frame(error_MSE), as.data.frame(error_Stdev) )
error[["sim Length"]]=c(1:k)*step
error[["thresholds1"]]=rep(threshold[1],3)
error[["thresholds2"]]=rep(threshold[2],3)
error[["data sources"]]=rep("energy_car",3)
error[["Number of simulated repetitions"]]=rep(circulate_number,3)
error[["real_parameters"]]=rep( toString(real_parameters), 3)
write.csv( error, '.\\asymptotic_normality_result\\2T-PoT_asymptotic_error.csv')
write.csv( fit_parameters, '.\\asymptotic_normality_result\\2T-PoT_asymptotic_parameters.csv')
sim_data=generate_two_side_pot_data( 3000*1, real_parameters, return, threshold = threshold )$return
data <- data.frame(return = sim_data)
p <- ggplot(data) +
geom_line(aes(x=1:nrow(data),y = return)) +
labs(title = 'simulation', x = NULL, y = "return") +
# scale_color_manual(name = NULL,values = c('sqrt(tau*g)' = 'black', 'sqrt(tau)' = 'red')) +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggsave(".asymptotic_normality_result//length3000_series.png",plot = p )
sim_data=generate_two_side_pot_data( 3000*1, real_parameters, return, threshold = threshold )$return
data <- data.frame(return = sim_data)
p <- ggplot(data) +
geom_line(aes(x=1:nrow(data),y = return)) +
labs(title = 'simulation', x = NULL, y = "return") +
# scale_color_manual(name = NULL,values = c('sqrt(tau*g)' = 'black', 'sqrt(tau)' = 'red')) +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggsave("./asymptotic_normality_result//length3000_series.png",plot = p )
sim_data=generate_two_side_pot_data( 3000*2, real_parameters, return, threshold = threshold )$return
data <- data.frame(return = sim_data)
p <- ggplot(data) +
geom_line(aes(x=1:nrow(data),y = return)) +
labs(title = 'simulation', x = NULL, y = "return") +
# scale_color_manual(name = NULL,values = c('sqrt(tau*g)' = 'black', 'sqrt(tau)' = 'red')) +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggsave("./asymptotic_normality_result//length6000_series.png",plot = p )
sim_data=generate_two_side_pot_data( 3000*3, real_parameters, return, threshold = threshold )$return
data <- data.frame(return = sim_data)
p <- ggplot(data) +
geom_line(aes(x=1:nrow(data),y = return)) +
labs(title = 'simulation', x = NULL, y = "return") +
# scale_color_manual(name = NULL,values = c('sqrt(tau*g)' = 'black', 'sqrt(tau)' = 'red')) +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggsave("./asymptotic_normality_result//length9000_series.png",plot = p )
